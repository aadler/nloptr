% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.derivatives.R
\name{check.derivatives}
\alias{check.derivatives}
\title{Check analytic gradients of a function using finite difference
approximations}
\usage{
check.derivatives(
  .x,
  func,
  func_grad,
  check_derivatives_tol = 1e-04,
  check_derivatives_print = "all",
  func_grad_name = "grad_f",
  points = 3L,
  ...
)
}
\arguments{
\item{.x}{Point at which the comparison is done.}

\item{func}{Function to be evaluated.}

\item{func_grad}{Function calculating the analytic gradients.}

\item{check_derivatives_tol}{Option determining when differences between the
analytic gradient and its finite difference approximation are flagged as an
error.}

\item{check_derivatives_print}{Option related to the amount of output.
\code{all} means that all comparisons are shown, \code{errors} only shows
comparisons that are flagged as an error, and \code{none} shows the number
of errors only.}

\item{func_grad_name}{Option to change the name of the gradient function.
that shows up in the output.}

\item{points}{Either a 3 or 5 point numerical estimate.}

\item{\dots}{Further arguments passed to the functions \code{func} or
\code{func_grad}.}
}
\value{
The return value contains a list with the analytic gradient, its
finite difference approximation, the relative errors, and a vector
comparing the relative errors to the tolerance.
}
\description{
This function compares the analytic gradients of a function with a finite
difference approximation and prints the results of these checks.
}
\examples{

library('nloptr')

# example with correct gradient
f <- function(x, a) sum((x - a) ^ 2)

f_grad <- function(x, a)  2 * (x - a)

check.derivatives(.x = 1:10, func = f, func_grad = f_grad,
          check_derivatives_print = 'none', a = runif(10))

# example with incorrect gradient
f_grad <- function(x, a)  2 * (x - a) + c(0, 0.1, rep(0, 8))

check.derivatives(.x = 1:10, func = f, func_grad = f_grad,
          check_derivatives_print = 'errors', a = runif(10))

check.derivatives(.x = 1:10, func = f, func_grad = f_grad,
          check_derivatives_print = 'errors',
          points = 5, a = runif(10))

# example with incorrect gradient of vector-valued function
g <- function(x, a) c(sum(x - a), sum((x - a) ^ 2))

g_grad <- function(x, a) {
   rbind(rep(1, length(x)) + c(0, 0.01, rep(0, 8)),
   2 * (x - a) + c(0, 0.1, rep(0, 8)))
}

check.derivatives(.x = 1:10, func = g, func_grad = g_grad,
          check_derivatives_print = 'all', a = runif(10))

}
\seealso{
\code{\link[nloptr:nloptr]{nloptr}},
\code{\link[nloptr:nl.grad]{nl.grad}}
}
\author{
Jelmer Ypma, Avraham Adler \email{Avraham.Adler@gmail.com}
}
\keyword{interface}
\keyword{optimize}
